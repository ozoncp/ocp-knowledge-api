// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-knowledge-api/internal/repo (interfaces: KnowledgeRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-knowledge-api/internal/models"
)

// MockKnowledgeRepo is a mock of KnowledgeRepo interface.
type MockKnowledgeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockKnowledgeRepoMockRecorder
}

// MockKnowledgeRepoMockRecorder is the mock recorder for MockKnowledgeRepo.
type MockKnowledgeRepoMockRecorder struct {
	mock *MockKnowledgeRepo
}

// NewMockKnowledgeRepo creates a new mock instance.
func NewMockKnowledgeRepo(ctrl *gomock.Controller) *MockKnowledgeRepo {
	mock := &MockKnowledgeRepo{ctrl: ctrl}
	mock.recorder = &MockKnowledgeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKnowledgeRepo) EXPECT() *MockKnowledgeRepoMockRecorder {
	return m.recorder
}

// AddKnowledge mocks base method.
func (m *MockKnowledgeRepo) AddKnowledge(arg0 models.Knowledge) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKnowledge", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddKnowledge indicates an expected call of AddKnowledge.
func (mr *MockKnowledgeRepoMockRecorder) AddKnowledge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnowledge", reflect.TypeOf((*MockKnowledgeRepo)(nil).AddKnowledge), arg0)
}

// AddKnowledges mocks base method.
func (m *MockKnowledgeRepo) AddKnowledges(arg0 []models.Knowledge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKnowledges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddKnowledges indicates an expected call of AddKnowledges.
func (mr *MockKnowledgeRepoMockRecorder) AddKnowledges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnowledges", reflect.TypeOf((*MockKnowledgeRepo)(nil).AddKnowledges), arg0)
}

// DescribeKnowledge mocks base method.
func (m *MockKnowledgeRepo) DescribeKnowledge(arg0 uint64) (*models.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeKnowledge", arg0)
	ret0, _ := ret[0].(*models.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKnowledge indicates an expected call of DescribeKnowledge.
func (mr *MockKnowledgeRepoMockRecorder) DescribeKnowledge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKnowledge", reflect.TypeOf((*MockKnowledgeRepo)(nil).DescribeKnowledge), arg0)
}

// ListKnowledge mocks base method.
func (m *MockKnowledgeRepo) ListKnowledge(arg0, arg1 uint64) ([]models.Knowledge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKnowledge", arg0, arg1)
	ret0, _ := ret[0].([]models.Knowledge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKnowledge indicates an expected call of ListKnowledge.
func (mr *MockKnowledgeRepoMockRecorder) ListKnowledge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKnowledge", reflect.TypeOf((*MockKnowledgeRepo)(nil).ListKnowledge), arg0, arg1)
}

// RemoveKnowledge mocks base method.
func (m *MockKnowledgeRepo) RemoveKnowledge(arg0 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKnowledge", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveKnowledge indicates an expected call of RemoveKnowledge.
func (mr *MockKnowledgeRepoMockRecorder) RemoveKnowledge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKnowledge", reflect.TypeOf((*MockKnowledgeRepo)(nil).RemoveKnowledge), arg0)
}
