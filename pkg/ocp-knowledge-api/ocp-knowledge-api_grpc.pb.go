// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_knowledge_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpKnowledgeApiClient is the client API for OcpKnowledgeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpKnowledgeApiClient interface {
	CreateKnowledgeV1(ctx context.Context, in *CreateKnowledgeV1Request, opts ...grpc.CallOption) (*CreateKnowledgeV1Response, error)
	DescribeKnowledgeV1(ctx context.Context, in *DescribeKnowledgeV1Request, opts ...grpc.CallOption) (*DescribeKnowledgeV1Response, error)
	ListKnowledgeV1(ctx context.Context, in *ListKnowledgeV1Request, opts ...grpc.CallOption) (*ListKnowledgeV1Response, error)
	RemoveKnowledgeV1(ctx context.Context, in *RemoveKnowledgeV1Request, opts ...grpc.CallOption) (*RemoveKnowledgeV1Response, error)
}

type ocpKnowledgeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpKnowledgeApiClient(cc grpc.ClientConnInterface) OcpKnowledgeApiClient {
	return &ocpKnowledgeApiClient{cc}
}

func (c *ocpKnowledgeApiClient) CreateKnowledgeV1(ctx context.Context, in *CreateKnowledgeV1Request, opts ...grpc.CallOption) (*CreateKnowledgeV1Response, error) {
	out := new(CreateKnowledgeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.knowledge.api.OcpKnowledgeApi/CreateKnowledgeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpKnowledgeApiClient) DescribeKnowledgeV1(ctx context.Context, in *DescribeKnowledgeV1Request, opts ...grpc.CallOption) (*DescribeKnowledgeV1Response, error) {
	out := new(DescribeKnowledgeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.knowledge.api.OcpKnowledgeApi/DescribeKnowledgeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpKnowledgeApiClient) ListKnowledgeV1(ctx context.Context, in *ListKnowledgeV1Request, opts ...grpc.CallOption) (*ListKnowledgeV1Response, error) {
	out := new(ListKnowledgeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.knowledge.api.OcpKnowledgeApi/ListKnowledgeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpKnowledgeApiClient) RemoveKnowledgeV1(ctx context.Context, in *RemoveKnowledgeV1Request, opts ...grpc.CallOption) (*RemoveKnowledgeV1Response, error) {
	out := new(RemoveKnowledgeV1Response)
	err := c.cc.Invoke(ctx, "/ocp.knowledge.api.OcpKnowledgeApi/RemoveKnowledgeV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpKnowledgeApiServer is the server API for OcpKnowledgeApi service.
// All implementations must embed UnimplementedOcpKnowledgeApiServer
// for forward compatibility
type OcpKnowledgeApiServer interface {
	CreateKnowledgeV1(context.Context, *CreateKnowledgeV1Request) (*CreateKnowledgeV1Response, error)
	DescribeKnowledgeV1(context.Context, *DescribeKnowledgeV1Request) (*DescribeKnowledgeV1Response, error)
	ListKnowledgeV1(context.Context, *ListKnowledgeV1Request) (*ListKnowledgeV1Response, error)
	RemoveKnowledgeV1(context.Context, *RemoveKnowledgeV1Request) (*RemoveKnowledgeV1Response, error)
	mustEmbedUnimplementedOcpKnowledgeApiServer()
}

// UnimplementedOcpKnowledgeApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpKnowledgeApiServer struct {
}

func (UnimplementedOcpKnowledgeApiServer) CreateKnowledgeV1(context.Context, *CreateKnowledgeV1Request) (*CreateKnowledgeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeV1 not implemented")
}
func (UnimplementedOcpKnowledgeApiServer) DescribeKnowledgeV1(context.Context, *DescribeKnowledgeV1Request) (*DescribeKnowledgeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeKnowledgeV1 not implemented")
}
func (UnimplementedOcpKnowledgeApiServer) ListKnowledgeV1(context.Context, *ListKnowledgeV1Request) (*ListKnowledgeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledgeV1 not implemented")
}
func (UnimplementedOcpKnowledgeApiServer) RemoveKnowledgeV1(context.Context, *RemoveKnowledgeV1Request) (*RemoveKnowledgeV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveKnowledgeV1 not implemented")
}
func (UnimplementedOcpKnowledgeApiServer) mustEmbedUnimplementedOcpKnowledgeApiServer() {}

// UnsafeOcpKnowledgeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpKnowledgeApiServer will
// result in compilation errors.
type UnsafeOcpKnowledgeApiServer interface {
	mustEmbedUnimplementedOcpKnowledgeApiServer()
}

func RegisterOcpKnowledgeApiServer(s grpc.ServiceRegistrar, srv OcpKnowledgeApiServer) {
	s.RegisterService(&OcpKnowledgeApi_ServiceDesc, srv)
}

func _OcpKnowledgeApi_CreateKnowledgeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKnowledgeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpKnowledgeApiServer).CreateKnowledgeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.knowledge.api.OcpKnowledgeApi/CreateKnowledgeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpKnowledgeApiServer).CreateKnowledgeV1(ctx, req.(*CreateKnowledgeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpKnowledgeApi_DescribeKnowledgeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeKnowledgeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpKnowledgeApiServer).DescribeKnowledgeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.knowledge.api.OcpKnowledgeApi/DescribeKnowledgeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpKnowledgeApiServer).DescribeKnowledgeV1(ctx, req.(*DescribeKnowledgeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpKnowledgeApi_ListKnowledgeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnowledgeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpKnowledgeApiServer).ListKnowledgeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.knowledge.api.OcpKnowledgeApi/ListKnowledgeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpKnowledgeApiServer).ListKnowledgeV1(ctx, req.(*ListKnowledgeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpKnowledgeApi_RemoveKnowledgeV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKnowledgeV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpKnowledgeApiServer).RemoveKnowledgeV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.knowledge.api.OcpKnowledgeApi/RemoveKnowledgeV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpKnowledgeApiServer).RemoveKnowledgeV1(ctx, req.(*RemoveKnowledgeV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpKnowledgeApi_ServiceDesc is the grpc.ServiceDesc for OcpKnowledgeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpKnowledgeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.knowledge.api.OcpKnowledgeApi",
	HandlerType: (*OcpKnowledgeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledgeV1",
			Handler:    _OcpKnowledgeApi_CreateKnowledgeV1_Handler,
		},
		{
			MethodName: "DescribeKnowledgeV1",
			Handler:    _OcpKnowledgeApi_DescribeKnowledgeV1_Handler,
		},
		{
			MethodName: "ListKnowledgeV1",
			Handler:    _OcpKnowledgeApi_ListKnowledgeV1_Handler,
		},
		{
			MethodName: "RemoveKnowledgeV1",
			Handler:    _OcpKnowledgeApi_RemoveKnowledgeV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-knowledge-api/ocp-knowledge-api.proto",
}
